#include<stdio.h>
main()
{
int ms, bs, nob, ef,n, mp[10],tif=0;
int i,p=0;
printf("Enter the total memory available (in Bytes) -- ");
scanf("%d",&ms);
printf("Enter the block size (in Bytes) -- ");
scanf("%d", &bs);
nob=ms/bs;
ef= ms-nob*bs;
printf("\nEnter the number of processes -- ");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("Enter memory required for process %d (in Bytes)-- ",i+1);
scanf("%d",&mp[i]);
}
printf("\nNo. of Blocks available in memory -- %d",nob);
printf("\n\nPROCESS\tMEMORY REQUIRED\t ALLOCATED\tINTERNAL FRAGMENTATION");
for(i=0;i<n && p<nob;i++)
{
printf("\n %d\t\t%d",i+1,mp[i]);
if(mp[i] > bs)
printf("\t\tNO\t\t---");
else
{
printf("\t\tYES\t%d",bs-mp[i]);
tif = tif + bs-mp[i];
p++;
}
}
if(i<n)
printf("\nMemory is Full, Remaining Processes cannot be accomodated");
printf("\n\nTotal Internal Fragmentation is %d",tif+ef);
}



Output:
Enter the total memory available (in Bytes) -- 100
Enter the block size (in Bytes) -- 25
Enter the number of processes -- 4
Enter memory required for process 1 (in Bytes)-- 20
Enter memory required for process 2 (in Bytes)-- 15
Enter memory required for process 3 (in Bytes)-- 20
Enter memory required for process 4 (in Bytes)-- 10
No. of Blocks available in memory -- 4
PROCESS  	MEMORY REQUIRED  	ALLOCATED   INTERNAL  FRAGMENTATION
1		 20 				YES 		5
2 		15 				YES	 	10
3		 20 				YES		 5
4 		10				 YES		 15
Total Internal Fragmentation is 35
